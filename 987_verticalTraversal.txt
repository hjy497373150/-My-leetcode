/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    map<int,vector<pair<int,int>>> mp;//key为列，value为行以及结点值
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        //dfs遍历整个二叉树，将结点以及对应的行列值存放在map中
        dfs(root,0,0);
        vector<vector<int>> res;
        for(auto it = mp.begin();it!=mp.end();it++){
            vector<pair<int, int>> &col = it->second;//取出当前列的所有结点
            sort(col.begin(), col.end());           //对其排序
            vector<int> tmp;              //准备将它转换成vector<int>
            for(int i = 0; i < col.size(); ++i)
                tmp.push_back(col[i].second);
            res.push_back(tmp);                   //放入ans
        }
        return res;
    }
    void dfs(TreeNode* node,int row,int col){
        if(node==nullptr)
            return;
        mp[col].push_back({row,node->val});
        dfs(node->left,row+1,col-1);
        dfs(node->right,row+1,col+1);
    }
};