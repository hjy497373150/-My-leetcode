class Solution {
public:
    bool isScramble(string s1, string s2) {
        int n = s1.size();
        int m = s2.size();
        // 如果长度不相等，则必然不相等
        if (n != m)
        {
            return false;
        }
        // 如果字符不相同，那么必然也不可能相等
        int cnt1[26];
        int cnt2[26];
        memset(cnt1, 0, sizeof(int)*26);
        memset(cnt2, 0, sizeof(int)*26);
        for (int i = 0; i < n; ++i)
        {
            ++cnt1[s1[i]-'a'];
            ++cnt2[s2[i]-'a'];
        }
        for (int i = 0; i < 26; ++i)
        {
            if (cnt1[i] != cnt2[i])
            {
                return false;
            }
        }

        // 这里额外多取一个是想覆盖len=n的情况，而无需额外去减1
        vector<vector<vector<int>>> d(n, vector<vector<int>>(n, vector<int>(n+1, 0)));
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                d[i][j][1] = s1[i] == s2[j];
            }
        }

        // 这里长度覆盖到n位置
        for (int len = 2; len <= n; ++len)
        {
            for (int i = 0; i <= n - len; ++i)
            {
                for (int j = 0; j <= n - len; ++j)
                {
                    // 内部子长度去尝试是否满足条件, 这里至少要保证分段大于0，所以范围是1~len-1
                    for (int k = 1; k <= len-1; ++k)
                    {
                        if (d[i][j][k] && d[i+k][j+k][len-k])
                        {
                            d[i][j][len] = true;
                            // 退出子长度k的循环
                            break;
                        }
                        if (d[i][j+len-k][k] && d[i+k][j][len-k])
                        {
                            d[i][j][len] = true;
                            // 退出子长度k的循环
                            break;
                        }
                    }
                }
            }
        }

        return d[0][0][n];
    }
};