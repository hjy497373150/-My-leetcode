class Solution {
public:
    int minimumOperations(string leaves) {
        //动态规划,dp[i][j]代表从0到i的树叶且第i片树叶处于j状态的总操作次数
        //j共有三种状态，0代表左边红，1代表中间黄，2代表右边红
        vector<vector<int>> dp(leaves.size(),vector<int>(3));
        //初始化,第一片叶子是否需要操作取决于它是否是黄色
        dp[0][0] = (leaves[0]=='y');
        dp[0][1] = dp[0][2] = dp[1][2] = INT_MAX;
        for(int i = 1;i<leaves.size();i++){
            //状态为0则需要将第i片叶子变成红色且第i-1片叶子也只能为红
            dp[i][0] = dp[i-1][0] + (leaves[i]=='y');
            //状态为1则需要将第i片叶子变成黄色且第i-1片叶子可为红(0)或黄(1)
            dp[i][1] = min(dp[i-1][1],dp[i-1][0]) + (leaves[i]=='r');
            //每一块必须要大于等于一片叶子，所以仅在i>2时考虑第三种状态
            if(i>=2)
                dp[i][2] = min(dp[i-1][1],dp[i-1][2]) + (leaves[i]=='y');
        }
        return dp[leaves.size()-1][2];
    }
};