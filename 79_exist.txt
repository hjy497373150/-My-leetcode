//深度遍历DFS(原地更改
//1.先找到第一次出现word中第一个字母的位置
//2.从该位置开始，依次看上下左右是否满足下一个字母（注意判断是否已经到边界了）
//3.满足继续下一步，直到所有的字母都满足返回true
class Solution {
public:
    bool mydfs(vector<vector<char>>& board, string word,int i,int j,int length){
        if(i >= board.size() || j >= board[0].size() || i<0 || j<0)//到边界了
            return false;
        //或者是当前word字母不匹配或是已经找过了(同一字母不被重复使用)
        if(word[length]!=board[i][j])
            return false;
        if(length == word.size()-1 && word[length]==board[i][j] )
            return true;
        char temp = board[i][j];
        board[i][j] = '#';
        bool flag = mydfs(board,word,i,j+1,length+1) || mydfs(board,word,i,j-1,length+1)                                           || mydfs(board,word,i-1,j,length+1) || mydfs(board,word,i+1,j,length+1);
        board[i][j] = temp;
        return flag;
    }
    bool exist(vector<vector<char>>& board, string word) {
        for(int i = 0;i < board.size();i++){
            for(int j = 0;j < board[0].size();j++){
                if(mydfs(board,word,i,j,0))
                    return true;
            }
        }
        return false;
    }
};