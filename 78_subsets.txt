class Solution {
public:
    void helper(vector<int>& nums,vector<int>& temp,vector<vector<int>>& res,int level){
        if(level==nums.size()){
            res.push_back(temp);
            return;
        }
        for(int i = 0;i < 2;i++){
            if(i==0){//将该元素加入temp
                temp.push_back(nums[level]);
                helper(nums,temp,res,level+1);
                temp.pop_back();
            }
            else{//不选该元素
                helper(nums,temp,res,level+1);
                continue;
            }
        }
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        //层序遍历求解
        // vector<vector<int>> res;
        // int n = nums.size();
        // if(n==0)
        //     return {{}};
        // res.push_back({});
        // for(int i = 0;i<n;i++){
        //     int m = res.size();
        //     for(int j = 0;j < m;j++){
        //         vector<int> temp = res[j];
        //         temp.push_back(nums[i]);
        //         res.push_back(temp);
        //     }
        // }
        // return res;
        //逐层递归（个人感觉比回溯法好理解）
        vector<vector<int>> res;
        vector<int> temp;
        if(nums.size()==0)
            return {{}};
        helper(nums,temp,res,0);
        return res;
    }
};