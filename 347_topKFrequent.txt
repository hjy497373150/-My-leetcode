class Solution {
public:
    class cmp{
    public:
        bool operator()(const pair<int,int>& m,const pair<int,int>& n){
            return m.second > n.second;
        }
    };
    vector<int> topKFrequent(vector<int>& nums, int k) {
        //哈希表记录各个元素出现的频率
        unordered_map<int,int> mp;
        for(int i = 0;i<nums.size();i++)
            mp[nums[i]]++;
        //小顶堆存放哈希表的pair
        priority_queue<pair<int,int>,vector<pair<int,int>>,cmp> p;
        for(unordered_map<int,int>::iterator it = mp.begin();it!=mp.end();it++){
            p.push(*it);
            //如果小顶堆中的元素大于k则需要去掉最小的pair
            if(p.size()>k)
                p.pop();
        }
        vector<int> res(k);
        //倒序给最终的结果赋值
        for(int i = k-1;i>=0;i--){
            res[i] = p.top().first;
            p.pop();
        }
        return res;
    }
};