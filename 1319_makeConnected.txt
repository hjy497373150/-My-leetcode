class Solution {
private:
    vector<int> visited;
    vector<vector<int>> edges;
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        //DFS深度优先搜索
        if(connections.size()<n-1)
            return -1;
        edges.resize(n);
        for(const auto &conn:connections){
            edges[conn[0]].push_back(conn[1]);
            edges[conn[1]].push_back(conn[0]);
        }
        int count = 0;//连通分量的个数
        visited.resize(n,0);
        for(int i = 0;i<n;i++){
            if(!visited[i]){
                dfs(i);
                count++;
            }
        }
        return count-1;//连通分量的个数-1即为操作次数
    }
    void dfs(int u){
        visited[u] = 1;
        for(int v:edges[u]){
            if(!visited[v]){
                dfs(v);
            }
        }
    }
};