/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if(n==0)
            return {};
        return helper(1,n);
    }
    vector<TreeNode*> helper(int start,int end){
        if(start > end)
            return {nullptr};
        vector<TreeNode*> res;
        for(int i = start;i<=end;i++){
            //得到可行的左子树集合
            vector<TreeNode*> Treeleft = helper(start,i-1);
            //得到可行的右子树集合
            vector<TreeNode*> Treeright = helper(i+1,end);
            //从左子树集合中选出一棵左子树，从右子树集合中选出一棵右子树，拼接到根节点上
            for(auto& left : Treeleft){
                for(auto& right : Treeright){
                    TreeNode* root = new TreeNode(i);
                    root->left = left;
                    root->right = right;
                    res.push_back(root);
                }
            }
        }
        return res;
    }
};