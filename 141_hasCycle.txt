/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        //快慢指针法
        ListNode *fast = head;
        ListNode *slow = head;
        while(fast != NULL){
            if(fast->next != NULL && fast->next->next!=NULL){
                fast = fast->next->next;
                slow = slow->next;
            }
            else
                return false;
            //只要存在环则快慢指针必定在环内某个位置相遇
            if(fast == slow)
                return true;
        }
        return false;
    }
};