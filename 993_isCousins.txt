/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        //BFS
        bool foundx = false,foundy = false;//表示是否找到了x和y
        TreeNode* parentx = nullptr;
        TreeNode* parenty = nullptr;
        queue<pair<TreeNode*,TreeNode*> > q;//pair(当前遍历到的节点，当前遍历节点的父节点)
        q.emplace(root,nullptr);
        while(!q.empty()){
            int size = q.size();
            for(int i = 0;i<size;i++){
                pair<TreeNode*,TreeNode*> p = q.front();
                q.pop();
                if(p.first->val==x){
                    foundx = true;
                    parentx = p.second;
                }
                else if(p.first->val == y){
                    foundy = true;
                    parenty = p.second;
                }
                else{
                    if(p.first->left!=nullptr)
                        q.emplace(p.first->left,p.first);
                    if(p.first->right!=nullptr)
                        q.emplace(p.first->right,p.first);
                }
            }
            //因为是层序遍历，所以找到x或者y中的任何一个就可以结束遍历了
            if(foundx || foundy)
                break;
        }
        //只有当x和y在同一层且他们的父节点不一致时，x和y才是堂兄弟
        return foundx && foundy && (parentx!=parenty);
    }
};