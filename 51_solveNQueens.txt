class Solution {
private:
    vector<vector<string>> res;
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<string> board(n,string(n,'.'));
        backtrace(board,0);
        return res;
    }
    void backtrace(vector<string>& board,int row){
        if(row == board.size()){//已经处理完这一轮得到一种可能的排列
            res.push_back(board);
            return;
        }
        int n = board[row].size();//列数
        for(int col = 0;col<n;col++){
            if(!isvalid(board,row,col))
                continue;
            board[row][col]='Q';
            backtrace(board,row+1);
            board[row][col]='.';
        }
    }
    bool isvalid(vector<string>& board,int row,int col){
        int n = board.size();
        // 检查列是否有皇后互相冲突
        for (int i = 0; i < n; i++) {
            if (board[i][col] == 'Q')
                return false;
        }
        // 检查右上方是否有皇后互相冲突
        for (int i = row - 1, j = col + 1; 
                i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 'Q')
                return false;
        }
        // 检查左上方是否有皇后互相冲突
        for (int i = row - 1, j = col - 1;
                i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q')
                return false;
        }
        return true;
    }
};

//Java
class Solution {
    private List<List<String>> res = new ArrayList<>();
    public List<List<String>> solveNQueens(int n) {
        char[][] board = new char[n][n];
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++)
                board[i][j] = '.';
        }
        backtrace(board,0);
        return res;
    }
    
    private void backtrace(char[][] board,int row){
        //已经完成一次放置方案
        if(row == board.length){
            res.add(turntolist(board));
            return;
        }
        for(int col = 0;col<board.length;col++){
            if(isvalid(board,row,col)){
                board[row][col] = 'Q';
                backtrace(board,row+1);
                board[row][col] = '.';
            }
        }
    }
    
    //判断当前位置能否放Q
    private boolean isvalid(char[][] board,int row,int col){
        //判断当前位置所在列的上方有无Q
        for(int i = 0;i<row;i++){
            if(board[i][col]=='Q')
                return false;
        }
        //判断当前位置右上方有无Q
        for(int i = row-1,j = col+1;i>=0&&j<board.length;i--,j++){
            if(board[i][j]=='Q')
                return false;
        }
        //判断当前位置左上方有无Q
        for(int i = row-1,j = col-1;i>=0&&j>=0;i--,j--){
            if(board[i][j]=='Q')
                return false;
        }
        return true;
    }
    
    //数组转换为list
    private List<String> turntolist(char[][] board){
        List<String> path = new ArrayList<>();
        for(int i = 0;i<board.length;i++)
            path.add(new String(board[i]));
        return path;
    }
}