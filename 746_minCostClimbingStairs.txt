class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        //动态规划，dp[i]表示到i层的最小花费
        int n = cost.size();
        vector<int> dp(n+1,0);
        dp[0] = cost[0];
        dp[1] = cost[1];
        for(int i = 2;i<n;i++){
                dp[i] = min(dp[i-2],dp[i-1]) + cost[i];
        }
        //到达顶部的最小花费由顶层和次顶层的最小值决定
        dp[n] = min(dp[n-2],dp[n-1]);
        return dp[n];
    }  
};
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        //改进的动态规划
        //因为当到达前楼层最小花费只与它的前两层相关
        //只需要两个变量来表示
        int n = cost.size();
        int ppre = cost[0];
        int pre = cost[1];
        int res = 0;
        for(int i = 2;i<n;i++){
            res = min(ppre,pre) + cost[i];
            ppre = pre;
            pre = res;
        }
        res = min(ppre,pre);
        return res;
    }
};