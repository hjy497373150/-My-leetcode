class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        //动态规划
        //up表示两个数字递增的最长摆动序列长度，down表示两个数字递减的最长摆动序列长度
        if(nums.size()<2)
            return nums.size();
        int up = 1,down = 1;
        for(int i = 1;i<nums.size();i++){
            if(nums[i] > nums[i-1])
                up = down+1;
            else if(nums[i] < nums[i-1])
                down = up + 1;
        }
        return max(up,down);
    }
};

class Solution {
public:
    int wiggleMaxLength(vector<int>& nums){
        //贪心,用谷或峰的数量来标识摆动序列的长度
        if(nums.size()<2)
            return nums.size();
        int prediff = nums[1]-nums[0];
        int res = prediff!=0 ? 2:1;//如果前两个元素相等则res初始为1否则初始为2
        for(int i=2;i<nums.size();i++){
            int diff = nums[i]-nums[i-1];
            if((diff>0 && prediff<=0) || (diff<0 && prediff>=0)){
                res++;
                prediff = diff;
            }
        }
        return res;
    }
};