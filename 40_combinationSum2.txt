class Solution {
private:
    vector<vector<int>> res;
    vector<int> ans;
public:
    void dfs(int start,int target,vector<int>& candidates){
        if(target == 0){
            res.push_back(ans);
            return;
        }
        for(int i = start;i<candidates.size() && target-candidates[i]>=0;i++){
            if(i > start && candidates[i] == candidates[i-1])
                continue;
            ans.push_back(candidates[i]);
            dfs(i+1,target-candidates[i],candidates);
            ans.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        dfs(0,target,candidates);
        return res;
    }
};