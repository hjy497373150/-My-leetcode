class Solution {
public:
    int dp[100][100][100];
    int removeBoxes(vector<int>& boxes) {
        //动态规划,dp[l][r][k]表示移除下标l到r且boxed[r]后有k个boxed[r]与相同的数字，k可为0
        //dp[l][r][k] = dp[l][r-1][0] + (k+1)^2,如果没有其他情况出现的话
        //但是有可能在boxes[l]~boxes[r-1]中也存在和boxes[r]相同值的元素，有可能获得更大的积分和
        memset(dp,0,sizeof dp);
        return helper(boxes,0,boxes.size()-1,0);
    }
    int helper(vector<int>& boxes,int l ,int r,int k){
        if(l>r)
            return 0;
        if(dp[l][r][k]!=0)
            return dp[l][r][k];
        while(r>l && boxes[r]==boxes[r-1]){
            r--;
            k++;
        }
        dp[l][r][k] = helper(boxes,l,r-1,0) + (k+1)*(k+1);
        for(int i = l;i<r;i++){
            if(boxes[i]==boxes[r]){
                //先移除boxes[i+1]~boxes[r-1]即为helper(boxes, i + 1, r - 1, 0)
                //然后再加上原数组中剩下的一部分helper(boxes, l, i, k + 1)
                dp[l][r][k] = max(dp[l][r][k], helper(boxes, l, i, k + 1) + helper(boxes, i + 1, r - 1, 0));
            }
        }
        return dp[l][r][k];
    }
};