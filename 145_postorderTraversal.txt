/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    vector<int> res;
public:
    vector<int> postorderTraversal(TreeNode* root) {
        //迭代，用nullptr进栈可以将前中后三种遍历统一写法
        stack<TreeNode*> stk;
        if(root==nullptr)
            return res;
        stk.push(root);
        while(!stk.empty()){
            TreeNode* node = stk.top();
            if(node!=nullptr){
                stk.pop();
                //当前节点（中）进栈,进栈顺序与后序遍历相反
                stk.push(node);
                stk.push(nullptr);
                //右子树进栈
                if(node->right)
                    stk.push(node->right);
                //左子树进栈
                if(node->left)
                    stk.push(node->left);
            }
            //当遍历到nullptr时对节点进行处理
            else{
                stk.pop();
                node = stk.top();
                res.push_back(node->val);
                stk.pop();
            }
        }
        return res;
    }
    // 递归
    // void helper(TreeNode* root){
    //     if(root==nullptr)
    //         return;
    //     helper(root->left);
    //     helper(root->right);
    //     res.push_back(root->val);
    // }
};