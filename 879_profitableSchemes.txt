class Solution {
public:
    int profitableSchemes(int n, int minProfit, vector<int>& group, vector<int>& profit) {
        //三维背包问题
        int len = group.size();
        int mod = (int)1e9+7;
        //dp[i][j][k]代表在前i个工作中选择j名员工获取利润至少为k的方案数
        //最终的答案为dp[len][j][minProfit],j=0-n，累加
        vector<vector<vector<int>>> dp(len+1,vector<vector<int>>(n+1,vector<int>(minProfit+1)));
        dp[0][0][0] = 1;
        for(int i = 1;i<=len;i++){
            int earn = profit[i-1],members = group[i-1];
            for(int j = 0;j<=n;j++){
                for(int k = 0;k<=minProfit;k++){
                    //当前员工数小于干这项工作需要的员工数，则工作无法开展
                    if(j < members)
                        dp[i][j][k] = dp[i-1][j][k];
                    //否则可以选择开展该项工作
                    //为什么是 max(0, k - earn)，k 表示当前需要的最小利润
                    // if (k >= earn)，前 i-1 种工作中选择的利润至少要达到 k-profit[i-1]
                    // if (k < earn)，说明前 i - 1 中工作的利润只要 >= 0 即可
                    else{
                        dp[i][j][k] = (dp[i-1][j][k] + dp[i-1][j-members][max(0,k-earn)]) % mod;
                    }
                }
            }
        }
        int res = 0;
        for(int j = 0;j<=n;j++){
            res = (res + dp[len][j][minProfit]) % mod;
        }
        return res;
    }
};

//降维解法
class Solution {
public:
    int profitableSchemes(int n, int minProfit, vector<int>& group, vector<int>& profit) {
        vector<vector<int>> dp(n + 1, vector<int>(minProfit + 1));
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }
        int len = group.size(), MOD = (int)1e9 + 7;
        for (int i = 1; i <= len; i++) {
            int members = group[i - 1], earn = profit[i - 1];
            for (int j = n; j >= members; j--) {
                for (int k = minProfit; k >= 0; k--) {
                    dp[j][k] = (dp[j][k] + dp[j - members][max(0, k - earn)]) % MOD;
                }
            }
        }
        return dp[n][minProfit];
    }
};