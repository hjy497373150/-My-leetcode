/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    unordered_map<Node*,Node*> visited;
    Node* cloneGraph(Node* node) {
        //深度优先搜索DFS，用哈希表存储访问过的节点
        if(node==nullptr)
            return node;
        //如果已经被访问过
        if(visited.find(node)!=visited.end())
            return visited[node];
        //深拷贝节点
        Node* clonenode = new Node(node->val);
        //将拷贝的节点存放在哈希表中
        visited[node] = clonenode;
        // 遍历该节点的邻居并更新克隆节点的邻居列表
        for(auto& neighbor:node->neighbors)
            clonenode->neighbors.emplace_back(cloneGraph(neighbor));
        return clonenode;
    }
};