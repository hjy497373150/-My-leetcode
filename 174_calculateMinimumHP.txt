class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        //从终点到起点的动态规划
        //dp[i][j]代表从(i,j)到终点所需的最小点数
        int m = dungeon.size();
        int n = dungeon[0].size();
        if(m==0||n==0)
            return 0;
        vector<vector<int>> dp(m+1,vector<int>(n+1,INT_MAX));
        dp[m][n-1] = dp[m-1][n] = 1;
        int res = 0;
        for(int i = m-1;i>=0;i--){
            for(int j = n-1;j>=0;j--){
                int nowmin = min(dp[i][j+1],dp[i+1][j]);
                dp[i][j] = max(nowmin-dungeon[i][j],1);//必须要大于1，否则骑士在该点就会死亡
            }
        }
        return dp[0][0];
    }
};