class Solution {
public:
    vector<int> f;
    int find(int x){
        return (f[x]==x)?x:(f[x]=find(f[x]));
    }
    void merge(int x,int y){
        int fx = find(x);
        int fy = find(y);
        f[fx] = fy;
    }
    int swimInWater(vector<vector<int>>& grid) {
        int n = grid.size();
        f.resize(n*n);
        for(int i = 0;i<n*n;i++)
            f[i] = i;
        vector<pair<int,int>> idx(n*n);//存储平台高度对应的位置
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                idx[grid[i][j]] = make_pair(i,j);
            }
        }
        vector<pair<int,int>> dir{{0,1},{0,-1},{1,0},{-1,0}};
        for(int res = 0;res<n*n;res++){
            auto [i,j] = idx[res];
            for(const auto[di,dj]:dir){
                int ni = i+di,nj  = j+dj;
                if(ni>=0 && ni<n &&nj>=0 && nj<n &&grid[ni][nj]<=res){
                    merge(i*n+j, ni*n+nj);
                }
            }
            if(find(0)==find(n*n-1))
                return res;
        }
        return -1;
    }
};