class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        //先排序再遍历
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        vector<int> res;
        int p1 = 0,p2 = 0;
        int pre = INT_MAX;
        while(p1 < nums1.size() && p2 < nums2.size()){
            if(nums1[p1]==nums2[p2]){
                if(res.empty() || pre != nums1[p1]){
                    res.push_back(nums1[p1]);
                    pre = nums1[p1];
                }
                p1++;
                p2++;
            }
            else if(nums1[p1] < nums2[p2]){
                p1++;
            }
            else
                p2++;
        }
        return res;
    }
};

class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        //set本身带有有序且无重复元素的性质
        unordered_set<int> set1, set2;
        for (auto& num : nums1) {
            set1.insert(num);
        }
        for (auto& num : nums2) {
            set2.insert(num);
        }
        return getIntersection(set1, set2);
    }

    vector<int> getIntersection(unordered_set<int>& set1, unordered_set<int>& set2) {
        if (set1.size() > set2.size()) {
            return getIntersection(set2, set1);
        }
        vector<int> intersection;
        for (auto& num : set1) {
            if (set2.count(num)) {
                intersection.push_back(num);
            }
        }
        return intersection;
    }
};