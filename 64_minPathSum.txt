class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        //显然的动态规划，dp[i][j]代表走到第i行j列的最小路径和
        //因为每次只能向下或者向右移动，所以dp[i][j]只与dp[i-1][j]和dp[i][j-1]有关
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,0));
        dp[0][0] = grid[0][0];
        //先处理第1行和第一列
        for(int i = 1;i<n;i++)
            dp[0][i] = dp[0][i-1] + grid[0][i];
        for(int j = 1;j<m;j++)
            dp[j][0] = dp[j-1][0] + grid[j][0];
        for(int i = 1;i<m;i++){
            for(int j = 1;j<n;j++){
                dp[i][j] = min(dp[i-1][j],dp[i][j-1]) + grid[i][j];
            }
        }
        return dp[m-1][n-1];
    }
};