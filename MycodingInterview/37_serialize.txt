/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    //层序遍历
    string serialize(TreeNode* root) {
        if(root==nullptr)
            return "";
        string res = "";
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode * node = q.front();
            q.pop();
            if(node!=nullptr){
                res += (to_string(node->val));
                res +=",";
                q.push(node->left);
                q.push(node->right);
            }
            else
                res += "null,";
        }
        res.pop_back();
        return res;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data=="")
            return nullptr;
        vector<string> datastring;
        string str;
        for(auto& ch:data){
            if(ch==','){
                datastring.push_back(str);
                str.clear();
            }
            else
                str += ch;
        }
        if(!str.empty()){
            datastring.push_back(str);
            str.clear();
        }
        TreeNode* root = new TreeNode(stoi(datastring[0]));
        queue<TreeNode*> q;
        q.push(root);
        int i = 1;
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            if(datastring[i]!="null"){
                node->left = new TreeNode(stoi(datastring[i]));
                q.push(node->left);
            }
            i++;
            if(datastring[i]!="null"){
                node->right = new TreeNode(stoi(datastring[i]));
                q.push(node->right);
            }
            i++;
        }
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));