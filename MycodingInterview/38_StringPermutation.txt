class Solution {
public:
    bool nextPermutation(string& s) {
        int i = s.size() - 2;
        while (i >= 0 && s[i] >= s[i + 1]) {
            i--;
        }
        if (i < 0) {
            return false;
        }
        int j = s.size() - 1;
        while (j >= 0 && s[i] >= s[j]) {
            j--;
        }
        swap(s[i], s[j]);
        reverse(s.begin() + i + 1, s.end());
        return true;
    }

    vector<string> permutation(string s) {
        //不断求下一个排列
        vector<string> ret;
        sort(s.begin(), s.end());
        do {
            ret.push_back(s);
        } while (nextPermutation(s));
        return ret;
    }
};

class Solution {
private:
    vector<string> res;
    set<string> setres;//去重
public:
    vector<string> permutation(string s) {
        if(s.size()==0)
            return {};
        helper(s,&s[0]);
        for(set<string>::iterator it = setres.begin();it!=setres.end();it++)
            res.push_back(*it);
        return res;
    }
    void helper(string& s,char* sbegin){
        if(*sbegin=='\0')
            setres.insert(s);
        else{
            for(char* sch = sbegin;*sch!='\0';sch++){
                char temp = *sbegin;
                *sbegin = *sch;
                *sch = temp;
                helper(s,sbegin+1);
                temp = *sbegin;
                *sbegin = *sch;
                *sch = temp;
            }
        }
    }
};

class Solution {
public:
    vector<string>res;
    vector<string> permutation(string s) {
        int cursor=0;
        permutation(s,cursor);
        return res;
    }
    void permutation(string &s,int cursor){
        if(cursor==s.size()-1){
            res.push_back(s);
        }
        else{
            for(int i=cursor;i<s.size();i++){
                if(judge(s,cursor,i))continue;  //从cursor开始，遍历不重复的字符
                swap(s[cursor],s[i]);
                permutation(s,cursor+1);
                swap(s[cursor],s[i]);
            }
        }
    }
    bool judge(string& s, int start, int end) {
        for (int i = start; i < end; ++i) {
            if (s[i] == s[end]) return true;
        }
        return false;
    }
};
