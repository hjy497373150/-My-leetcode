/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.size()==0||inorder.size()==0)
            return nullptr;
        int length = preorder.size();
        return helper(preorder,0,length-1,inorder,0,length-1);
    }
    TreeNode* helper(vector<int>& preorder,int prestart,int preend,vector<int>& inorder,int instart,int inend){
        if(prestart>preend)
            return nullptr;
        TreeNode* root = new TreeNode(preorder[prestart]);
        int flag = 0;
        //找根结点
        while(inorder[instart+flag]!=preorder[prestart]){
            flag++;
        }
        root->left = helper(preorder,prestart+1,prestart+flag,inorder,instart,instart+flag-1);
        root->right = helper(preorder,prestart+flag+1,preend,inorder,instart+flag+1,inend);
        return root;
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.size()==0 || inorder.size()==0)
            return nullptr;
        TreeNode* root = new TreeNode(preorder[0]);
        stack<TreeNode*> stk;
        stk.push(root);
        int inorderindex = 0;
        //栈 迭代法
        for(int i = 1;i<preorder.size();i++){
            int preorderval = preorder[i];
            TreeNode* node = stk.top();
            //若上一个元素不等于中序遍历下标指向的元素，则将当前元素作为其上一个元素的左子节点，并将当前元素压入栈内
            if(node->val!=inorder[inorderindex]){
                node->left = new TreeNode(preorderval);
                stk.push(node->left);
            }
            //若上一个元素等于中序遍历下标指向的元素，则从栈内弹出一个元素，
            //同时令中序遍历下标指向下一个元素，之后继续判断栈顶元素是否等于中序遍历下标指向的元素，
            //若相等则重复该操作，直至栈为空或者元素不相等。然后令当前元素为最后一个相等元素的右节点。
            else{
                while(!stk.empty()&&stk.top()->val==inorder[inorderindex]){
                    node = stk.top();
                    stk.pop();
                    inorderindex++;
                }
                node->right = new TreeNode(preorderval);
                stk.push(node->right);
            }
        }
        return root;
    }
};