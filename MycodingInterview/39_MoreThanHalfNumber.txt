class Solution {
public:
    int majorityElement(vector<int>& nums) {
        //超过一半的数字是最后留下来的res
        //思路很巧妙，从第一个数字开始分别记录该数字出现的次数为n，如果n为0就将下一个数字置为res
        //遍历到的数字如果与res相同则n++，否则n--
        if(nums.size()==1)
            return nums[0];
        int n = 1;
        int res = nums[0];
        for(int i = 1;i<nums.size();i++){
            if(n==0){
                res = nums[i];
                n = 1;
            }
            else if(res == nums[i])
                n++;
            else
                n--;
        }
        return res;
    }
};

哈希表常规解法
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        if(nums.size()==1)
            return nums[0];
        int n = nums.size();
        int flag = n/2;
        int res = 0;
        map<int,int> mp;
        for(int i = 0;i<n;i++){
            mp[nums[i]]++;
        }
        for(map<int,int>::iterator it = mp.begin();it!=mp.end();it++){
            if((it->second) > flag){
                res = it->first;
                return res;
            }
        }
        return res;
    }
};