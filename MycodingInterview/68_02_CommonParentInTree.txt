/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    //找到去p、q结点的路径存放在vector中，然后比较路径，最后一个相同的节点即为公共节点
    void getPath(TreeNode *root, TreeNode *end, vector<TreeNode*>& path) {
        stack<TreeNode*> stk;
        TreeNode *p = root, *prev = nullptr;
        while (p || !stk.empty()) {
            while (p) {
                stk.push(p);
                path.push_back(p);
                if (p == end) return;
                p = p->left;
            }
            p = stk.top();
            if (!p->right || p->right == prev) {
                path.pop_back();
                stk.pop();
                prev = p;
                p = nullptr;
            } else {
                p = p->right;
            }
        }
    }
    
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        vector<TreeNode*> path1, path2;
        getPath(root, p, path1);
        getPath(root, q, path2);
        int n = min(path1.size(), path2.size());
        TreeNode *last = nullptr;
        for (int i = 0; i < n; i++) {
            if (path1[i] != path2[i]) return last;
            last = path1[i];
        }
        return last;
    }
};

class Solution {
public:
    void getPath(TreeNode *root, TreeNode *end, vector<TreeNode*>& path) {
        stack<TreeNode*> stk;
        TreeNode *p = root, *prev = nullptr;
        while (p || !stk.empty()) {
            while (p) {
                stk.push(p);
                path.push_back(p);
                if (p == end) return;
                p = p->left;
            }
            p = stk.top();
            if (!p->right || p->right == prev) {
                path.pop_back();
                stk.pop();
                prev = p;
                p = nullptr;
            } else {
                p = p->right;
            }
        }
    }
    
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        vector<TreeNode*> path1, path2;
        getPath(root, p, path1);
        getPath(root, q, path2);
        int n = min(path1.size(), path2.size());
        TreeNode *last = nullptr;
        for (int i = 0; i < n; i++) {
            if (path1[i] != path2[i]) return last;
            last = path1[i];
        }
        return last;
    }
};

找到去p、q结点的路径存放在vector中，然后比较路径，最后一个相同的节点即为公共节点


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root || p==root || q==root)
            return root;
        TreeNode* left = lowestCommonAncestor(root->left,p,q);
        TreeNode* right = lowestCommonAncestor(root->right,p,q);
        if(!left && !right)
            return nullptr;
        else if(left && !right)
            return left;
        else if(!left && right)
            return right;
        return root;
    }
};

2021.3.1更新
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==nullptr)
            return nullptr;// 如果树为空，直接返回null
        if(root==p || root==q)// 如果 p和q中有等于 root的，那么它们的最近公共祖先即为root（一个节点也可以是它自己的祖先）
            return root;
        TreeNode* left = lowestCommonAncestor(root->left,p,q);// 递归遍历左子树，只要在左子树中找到了p或q，则先找到谁就返回谁
        TreeNode* right = lowestCommonAncestor(root->right,p,q);// 递归遍历右子树，只要在右子树中找到了p或q，则先找到谁就返回谁
        if(left==nullptr)// 如果在左子树中 p和 q都找不到，则 p和 q一定都在右子树中，右子树中先遍历到的那个就是最近公共祖先（一个节点也可以是它自己的祖先）
            return right;
        else if(right==nullptr)// 否则，如果 left不为空，在左子树中有找到节点（p或q），这时候要再判断一下右子树中的情况，如果在右子树中，p和q都找不到，则 p和q一定都在左子树中
            return left;
        else
            return root;//当 left和 right均不为空时，说明 p、q节点分别在 root异侧, 最近公共祖先即为 root
    }
};