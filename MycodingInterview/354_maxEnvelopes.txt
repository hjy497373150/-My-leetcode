class Solution {
public:
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        int n = envelopes.size();
        if(n<=1)
            return n;
        //按照envelopes w的增序，h的降序排列
        sort(envelopes.begin(),envelopes.end(),[](const auto&a,const auto& b){
            return (a[0]<b[0]) ||(a[0]==b[0] && a[1]>b[1]);
        });
        vector<int> nums(n);//存放envelopes中第二个元素的值
        for(int i = 0;i<n;i++)
            nums[i] = envelopes[i][1];
        return lengthoflist(nums);
    }
    int lengthoflist(vector<int> & nums){
        //贪心加二分查找，尽量使每次在上升子序列最后加上的那个数尽可能的小
        vector<int> dp(nums.size()+1,0);
        int len = 1;
        dp[len] = nums[0];//dp[len]为长度为len的子序列的最后一个数字的大小，dp是递增的
        for(int i = 1;i<nums.size();i++){
            //当前处理元素大于dp[len]，则len++更新dp[len]的值
            if(nums[i]>dp[len])
                dp[++len] = nums[i];
            else{
                int l = 1,r = len,pos = 0;
                while(l<=r){
                    int mid = (l+r)>>1;
                    if(dp[mid]<nums[i]){
                        pos = mid;
                        l = mid+1;
                    }
                    else
                        r = mid-1;
                }
                dp[pos+1] = nums[i];
            }
        }
        return len;
    }
};