class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
	//两次二分
        vector<int> res;
        int n = nums.size();
        int l = 0,r = n;
        int mid = 0;
        if(n==0)
            return {-1,-1};
        //第一次二分法找左边界
        while(l < r){
            mid = l + (r-l)/2;
            if(nums[mid] < target)
                l = mid+1;
            else
                r = mid;
        }
        //没找到或者已经到尾了则返回{-1,-1}
        if(l==n || nums[l]!=target)
            return {-1,-1};
        else
            res.push_back(l);
        //第二次二分法找右边界
        r = n;//目的是不越界
        while(l < r){
            mid = l + (r-l)/2;
            if(nums[mid] == target)
                l = mid+1;
            else
                r = mid;
        }
        if(l==r && nums[r-1]==target)//这个地方注意是r-1
            res.push_back(r-1);
        return res;
    }
};