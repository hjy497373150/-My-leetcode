class Solution {
private:
    vector<vector<int>> res;
    vector<int> ans;
public:
    void dfs(int start,int target,vector<int>& candidates){
        //回溯法
        if(target == 0){
            res.push_back(ans);
            return;
        }
        for(int i = start;i<candidates.size() && target-candidates[i]>=0;i++){
            ans.push_back(candidates[i]);
            dfs(i,target-candidates[i],candidates);
            ans.pop_back();
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        //从大到小排序
        sort(candidates.begin(),candidates.end());
        dfs(0,target,candidates);
        return res;
    }
};