class Solution {
public:
    int minDistance(string word1, string word2) {
        //经典动态规划,两个单词相互转换的操作一共只有三种，A插入、B插入、A替换
        int m = word1.length();
        int n = word2.length();
        //如果其中有空串，则编辑距离为非空串的长度
        if(m==0||n==0)
            return m+n;
        int dp[m+1][n+1];
        //初始化dp数组
        for(int i = 0;i<=m;i++){
            dp[i][0] = i;
        }
        for(int j = 0;j<=n;j++)
            dp[0][j] = j;
        for(int i = 1;i<=m;i++){
            for(int j = 1;j<=n;j++){
                //如果两个单词的最后一个字母不同
                if(word1[i-1]!=word2[j-1]){
                    dp[i][j] = 1+min(min(dp[i-1][j],dp[i][j-1]),dp[i-1][j-1]);
                }
                //最后一个字母相同
                else
                    dp[i][j] = 1+min(min(dp[i-1][j],dp[i][j-1]),dp[i-1][j-1]-1);
            }
        }
        return dp[m][n];
    }
};