class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        if(n<2)
            return s;
        vector<vector<bool>> dp(n,vector<bool>(n,false));
        int start = 0;
        int maxlength = 1;
        for(int i = 0;i<n;i++)
            dp[i][i] = true;
        for(int i = 1;i<n;i++){
            for(int j = 0;j<i;j++){
                if(s[i]==s[j]){
                    //如果两个相等字符之间的字符数小于2则一定回文
                    if(i-j<3)
                        dp[j][i] = true;
                    //否则由前后各移动一个字符的字串决定
                    else
                        dp[j][i] = dp[j+1][i-1];
                }
                //若是回文则判断当前的回文长度是否为最大长度
                if(dp[j][i]){
                    int length = i-j+1;
                    if(length > maxlength){
                        maxlength = length;
                        start = j;
                    }
                }
            }
        }
        return s.substr(start,maxlength);
    }
};