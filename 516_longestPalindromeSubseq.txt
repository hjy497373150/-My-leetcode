class Solution {
public:
    int longestPalindromeSubseq(string s) {
        //动态规划
        int n = s.size();
        vector<vector<int>> dp(n,vector<int>(n));//dp[i][j]表示下标i-j最长回文子序列的长度
        for(int i = 0;i<n;i++)
            dp[i][i] = 1;//初始化，单个字符一定是回文的
        for(int i = n-1;i>=0;i--){
            for(int j = i+1;j<n;j++){
                //1.如果s[i]==s[j]则dp[i][j]由dp[i+1][j-1]决定
                if(s[i]==s[j]){
                    dp[i][j] = dp[i+1][j-1]+2;
                }
                //2.否则由dp[i+1][j]和dp[i][j-1]决定
                else{
                    dp[i][j] = max(dp[i+1][j],dp[i][j-1]);
                }
            }
        }
        return dp[0][n-1];
    }
};