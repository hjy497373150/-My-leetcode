/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/
class Solution {
public:
    Node* connect(Node* root) {
        //在层序遍历的基础上添加next指针
        if(root==nullptr)
            return root;
        queue<Node*> q;
        q.push(root);
        while(!q.empty()){
            int size = q.size();
            for(int i = 0;i<size;i++){
                Node* node = q.front();
                q.pop();
                //不是该层的最后一个元素则需要填充next指针
                if(i<size-1)
                    node->next = q.front();
                if(node->left!=nullptr)
                    q.push(node->left);
                if(node->right!=nullptr)
                    q.push(node->right);
            }
        }
        return root;
        
    }
};

class Solution {
public:
    Node* connect(Node* root) {
        //巧妙的方法使用已建立的next指针
        if(root==nullptr)
            return root;
        Node* leftest = root;
        //如果下一层还有节点
        while(leftest->left!=nullptr){
            Node* head = leftest;
            while(head!=nullptr){
                //两节点拥有同一个父节点则直接相连
                head->left->next = head->right;
                //否则通过上一层的next关系进行连接
                if(head->next!=nullptr)
                    head->right->next = head->next->left;
                head = head->next;
            }
            leftest = leftest->left;
        }
        return root;
    }
};