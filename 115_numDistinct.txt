class Solution {
public:
    int numDistinct(string s, string t) {
        if(s.size()<t.size())
            return 0;
        int m = s.size(),n = t.size();
        //动态规划，dp[i][j]表示字符串s.substr(i)的子序列中t.substr(j)出现的次数
        vector<vector<long> > dp(m+1,vector<long>(n+1,0));//用long防止溢出
        for(int i = 0;i<=m;i++)
            dp[i][n] = 1;//t.substr(n)为空字符串因此它一定是s.substr(i)的字串
        for(int i = m-1;i>=0;i--){
            for(int j = n-1;j>=0;j--){
                if(s[i]==t[j])
                    dp[i][j] = dp[i+1][j+1] + dp[i+1][j];//前者是匹配当前字符，后者是不匹配
                else
                    dp[i][j] = dp[i+1][j];
            }
        }
        return dp[0][0];
    }
};