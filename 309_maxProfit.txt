class Solution {
public:
    int maxProfit(vector<int>& prices) {
        //动态规划,三个状态
        //当天持有一只股票、当天刚好卖出一只股票处于冷冻期、当天不持有股票也不处于冷冻期
        if(prices.empty())
            return 0;
        int n = prices.size();
        vector<vector<int>> dp(n,vector<int>(3));
        dp[0][0] = -prices[0];
        for(int i = 1;i<n;i++){
            dp[i][0] = max(dp[i-1][0],dp[i-1][2]-prices[i]);
            dp[i][1] = dp[i-1][0]+prices[i];
            dp[i][2] = max(dp[i-1][1],dp[i-1][2]);
        }
        return max(dp[n-1][1],dp[n-1][2]);
    }
};
对于dp[i][0]，我们目前持有的这一支股票可以是在第 i−1 天就已经持有的，对应的状态为 dp[i-1][0]或者是第 i 天买入的，那么第 i−1 天就不能持有股票并且不处于冷冻期中，对应的状态为 dp[i-1][2] 加上买入股票的负收益

对于dp[i][1]，我们在第 i 天结束之后处于冷冻期的原因是在当天卖出了股票，那么说明在第 i−1 天时我们必须持有一支股票，对应的状态为 dp[i-1][0] 加上卖出股票的正收益 

对于 dp[i][2]，我们在第 i 天结束之后不持有任何股票并且不处于冷冻期，说明当天没有进行任何操作，即第 i−1 天时不持有任何股票：如果处于冷冻期，对应的状态为dp[i-1][1]；如果不处于冷冻期，对应的状态为 dp[i-1][2]
