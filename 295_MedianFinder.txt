双堆法
class MedianFinder {
private:
    priority_queue<int> min_max;//较小部分数的大顶推
    priority_queue<int,vector<int>,greater<int>> max_min;//较大数字的小顶堆
public:
    /** initialize your data structure here. */
    MedianFinder() {
    }
    
    void addNum(int num) {
        min_max.push(num);//加入到大顶堆中
        max_min.push(min_max.top());//把较小数字的最大数插入到小顶堆中
        min_max.pop();//从大顶堆中弹出这个数字
        if(min_max.size()<max_min.size()){
            min_max.push(max_min.top());
            max_min.pop();
        }
    }
    
    double findMedian() {
        return min_max.size()>max_min.size()?(double)min_max.top():(min_max.top()+max_min.top())*0.5;
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */

插入法
class MedianFinder {
private:
    vector<int> res;
public:
    /** initialize your data structure here. */
    MedianFinder() {
    }
    
    void addNum(int num) {
        if(res.empty())
            res.push_back(num);
        else{
            res.insert(lower_bound(res.begin(),res.end(),num),num);
        }
    }
    
    double findMedian() {
        int n = res.size();
        return n&1?res[n/2]:(res[n/2]+res[n/2-1])*0.5;
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
	