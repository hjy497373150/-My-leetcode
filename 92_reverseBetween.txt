/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        //迭代法，将整个链表分为前部分链表、需要反转的、后部分链表三部分
        
        //第一步找到反转前部分的最后一个结点
        ListNode* dummy = new ListNode(0);
        dummy->next = head;
        int count = 1;
        ListNode* node = dummy;
        while(count!=m){
            node = node->next;
            count++;
        }
        //连接前部分尾部与反转后的链表头
        node->next = reverse(node->next,n-m+1);
        return dummy->next;
    }
    //第二步反转需要翻转的部分
    ListNode* reverse(ListNode* head,int num){
        ListNode* next = nullptr;
        ListNode* newNode = nullptr;//反转后的链表头
        //反转链表后的最后一个节点就是一开始的头节点
        ListNode* reverseTail = head;
        for(int i = 0;i<num;i++){
            next = head->next;
            head->next = newNode;
            newNode = head;
            head = next;
        }
        //连接反转后的链表尾与后部分链表
        reverseTail->next = head;
        return newNode;
    }
};