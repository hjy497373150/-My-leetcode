class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        //动态规划，从前往后遍历每一个字符，分别将该字符前面的字符串组合
        //与wordDict中的相比较
        unordered_set<string> st;
        int maxsize = 0,minsize = 0;
        vector<bool> dp(s.size()+1,false);
        dp[0] = true;
        for(int i = 0;i<wordDict.size();i++){
            st.insert(wordDict[i]);
            if(wordDict[i].size() > maxsize)
                maxsize = wordDict[i].size();
            if(wordDict[i].size() < minsize)
                minsize = wordDict[i].size();
        }
        for(int i = 1;i<=s.size();i++){
            for(int j = max(i-maxsize,0);i-j >= minsize;j++){
                if(dp[j] && st.find(s.substr(j,i-j)) != st.end()){
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp.back();
    }
};