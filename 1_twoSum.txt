class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        //暴力枚举
        vector<int> res(2,0);
        int size = nums.size();
        for(int i = 0;i<size-1;i++){
            for(int j = i+1;j<size;j++){
                if(nums[i] + nums[j] == target){
                    res[0] = i;
                    res[1] = j;
                    return res;
                }
            }
        }
        return res;
        
    }
};

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        //哈希表存储下标法
        unordered_map<int,int> mp;
        for(int i = 0;i<nums.size();i++){
            auto temp = mp.find(target-nums[i]);
            if(temp!=mp.end())
                return {temp->second,i};
            mp[nums[i]] = i;
        }
        return {};
    }
};

//java
class Solution {
    public int[] twoSum(int[] nums, int target) {
        //哈希表，key是数字，value是下标
        Map<Integer,Integer> hashtable = new HashMap<Integer,Integer>();
        for(int i = 0;i<nums.length;i++){
            if(hashtable.containsKey(target-nums[i])){
                return new int[]{hashtable.get(target-nums[i]),i};
            }
            hashtable.put(nums[i],i);
        }
        return new int[0];
    }
}