class Solution {
public:
    int splitArray(vector<int>& nums, int m) {
        //动态规划，dp[i][j]表示把前i个数分为j段的最小的最大值
        int n = nums.size();
        vector<vector<long long>> dp(n+1,vector<long long>(m+1,LLONG_MAX));
        //dp[i][j]由枚举的k值dp[k][j-1]和k+1到第i个数的和，两者的最大值决定
        vector<long long> sum(n+1,0);
        for(int i = 1;i<=n;i++)
            sum[i] = sum[i-1] + nums[i-1];
        dp[0][0] = 0;
        for(int i = 1;i<=n;i++){
            for(int j = 1;j<=min(i,m);j++){
                for(int k=0;k<i;k++)
                    dp[i][j] = min(dp[i][j],max(dp[k][j-1],sum[i]-sum[k]));
            }
        }
        return dp[n][m];
    }
};