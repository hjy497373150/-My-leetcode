class Solution {
public:
    vector<int> constructArr(vector<int>& a) {
        //从前往后遍历得到a[i]左边的乘积之和
        //从后往前遍历的到a[i]右边的乘积之和
        if(a.size()==0)
            return {};
        vector<int> res(a.size(),1);
        int left = 1;
        for(int i = 0;i<a.size();i++){
            res[i] = left;
            left = left * a[i];
        }
        int right = 1;
        for(int i = a.size()-1;i>=0;i--){
            res[i] = right * res[i];
            right = right * a[i];
        }
        return res;
    }
};

带除法以及0
class Solution {
public:
    vector<int> constructArr(vector<int>& a) {
        if(a.size()==0)
            return {};
        int size = a.size();
        vector<int> res(size,0);
        int count = 1;
        int flag = 0;
        int flagnum = 0;
        for(int i = 0;i<size;i++){
            if(a[i]==0){
                flag++;
                flagnum = i;
                continue;
            }
            count *= a[i];
        }
        if(flag==1){
            res[flagnum] = count;
            return res;
        }
        else if(flag>1){
            return res;
        }
        else{
            for(int i = 0;i<size;i++){
                res[i] = count/a[i];
            }
        }
        return res;
    }
};