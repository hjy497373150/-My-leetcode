class Solution {
public:
    string countOfAtoms(string formula) {
        int n = formula.size();
        vector<pair<string,int>> stk;//vec模拟栈
        for(int i = 0;i<n;i++){
            //左括号直接入栈
            if(formula[i]=='('){
                stk.emplace_back(make_pair("(",1));
            }
            //处理一个原子
            else if(formula[i] >='A' && formula[i]<='Z'){
                string str = "";
                str += formula[i];
                while(i < n && (formula[i+1] >= 'a' && formula[i+1] <= 'z')){
                    i++;
                    str += formula[i];
                }
                //如果有数字继续处理数字
                if(i<n && (formula[i+1] >= '0' && formula[i+1] <= '9')){
                    int num = 0;
                    while(i<n-1 && (formula[i+1] >= '0' && formula[i+1] <= '9')){
                        num *= 10;
                        i++;
                        num += formula[i]-'0';
                    }
                    stk.emplace_back(make_pair(str,num));
                }
                else
                    stk.emplace_back(make_pair(str,1));
            }
            //处理右括号
            else{
                int num = 0;
                int tempindex = stk.size();
                while(i<n-1 && (formula[i+1] >= '0' && formula[i+1] <= '9')){
                    num *= 10;
                    i++;
                    num += formula[i]-'0';
                }
                //仅仅是括号，不用翻倍
                if(num==0)
                    num = 1;
                //将括号里面的原子翻指定倍
                while(--tempindex && stk[tempindex].first !="("){
                    stk[tempindex].second *= num;
                }
                stk.erase(stk.begin()+tempindex);
            }
        }
        map<string,int> mp;
        for(int i = 0;i<stk.size();i++){
            mp[stk[i].first] += stk[i].second;
        }
        string res = "";
        for(auto& x:mp){
            if(x.second > 1)
                res += x.first + to_string(x.second);
            else
                res += x.first;
        }
        return res;
    }
};