//快慢指针
//将前半部分翻转后再与后半部分一一比较即可
//当为奇数个数字时，跳过最中间的结点

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next == NULL)
            return true;
        ListNode* slow = head;
        ListNode* fast = head;
        ListNode *p,*pre=NULL;
        while(fast && fast->next){//各指针就位
            p = slow;
            slow = slow->next;
            fast = fast->next->next;
            p->next = pre;
            pre = p;
        }
        if(fast)//若为奇数，跳过最中间的数
            slow = slow->next;
        while(slow){
            if(slow->val != p->val)
                return false;
            slow = slow->next;
            p = p->next;
        }
        return true;
    }
};