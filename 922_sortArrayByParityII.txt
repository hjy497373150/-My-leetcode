class Solution {
    public int[] sortArrayByParityII(int[] A) {
        //暴力交换法
        int i = 0;
        while(i < A.length-1){
            if(!isvalid(i,A[i])){
                int j = i+1;
                while(j < A.length){
                    if((!isvalid(j,A[j])) && odevity(i,j)){
                        int temp = A[i];
                        A[i] = A[j];
                        A[j] = temp;
                        break;
                    }
                    j++;
                }
            }
            i++;
        }
        return A;
    }
    //判断该数此时是否在正确的位置上
    public boolean isvalid(int i,int num){
        if((i%2==0 && num%2==0) || (i%2!=0 && num%2!=0))
            return true;
        return false;
    }
    //判断两数奇偶性相异
    public boolean odevity(int a,int b){
        if((a%2!=0 && b%2==0) || (a%2==0 && b%2!=0))
            return true;
        return false;
    }
}

class Solution {
    public int[] sortArrayByParityII(int[] A) {
        //双指针i,j分别维护奇偶位置的数
        int j = 1;
        //i只遍历偶数位置
        for(int i = 0;i<A.length;i+=2){
            //如果偶数位置上出现奇数，则需要处理
            if(A[i]%2==1){
                //利用奇数位置j往后遍历，找到第一个不符合要求的数
                while(A[j]%2==1)
                    j+=2;
                swap(A,i,j);
            }
        }
        return A;
    }
    public void swap(int[] A,int i,int j){
        int temp = A[i];
        A[i] = A[j];
        A[j] = temp;
    }
}