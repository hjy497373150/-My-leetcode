/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        //将该结点插入为叶子结点是最简单的
        //迭代模拟
        // if(root==nullptr)
        //     return new TreeNode(val);
        // TreeNode* node = root;
        // while(node!=nullptr){
        //     //如果node值大于val说明要插入到左子树
        //     if(node->val > val){
        //         //左子树为空则直接将val作为左子树插入即可
        //         if(node->left==nullptr){
        //             node->left = new TreeNode(val);
        //             break;
        //         }
        //         //否则再将node的左子树赋值给node进行循环
        //         node = node->left;
        //     }
        //     if(node->val < val){
        //         //右子树为空则直接将val作为右子树插入即可
        //         if(node->right==nullptr){
        //             node->right = new TreeNode(val);
        //             break;
        //         }
        //         //否则再将node的右子树赋值给node进行循环
        //         node = node->right;
        //     }
        // }
        // return root;
        
        //递归
        if(root==nullptr){
            TreeNode* node = new TreeNode(val);
            return node;
        }
        if(root->val > val)
            root->left = insertIntoBST(root->left,val);
        if(root->val < val)
            root->right = insertIntoBST(root->right,val);
        return root;
    }
};