class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        //哈希表，分别对应元素最早出现的位置,最后出现的位置,出现的次数
        unordered_map<int,int> left,right,counts;
        int degree = 0;
        for(int i = 0;i<nums.size();i++){
            //该元素没出现过
            if(!left.count(nums[i]))
                left[nums[i]] = i;
            //更新最后出现的位置和出现的次数
            right[nums[i]] = i;
            counts[nums[i]]++;
            degree = max(degree,counts[nums[i]]);
        }
        int res = nums.size();
        //遍历所有元素
        for(auto& count:counts){
            //如果当前元素出现的次数等于度，则其最后出现的位置-最早出现的位置+1即为所求
            if(count.second == degree)
                res = min(res,right[count.first]-left[count.first]+1);
        }
        return res;
    }
};