class Solution {
public:
    int checkRecord(int n) {
        //动态规划
        vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(3)));//dp[i][j][k]代表前i天有j次缺席且结尾有k个连续L的可获得奖励的方案次数
        dp[0][0][0] = 1;
        for(int i = 1;i<=n;i++){
            //以P结尾
            for(int j = 0;j<=1;j++){
                for(int k = 0;k<=2;k++){
                    //P不会影响因此只与前一天有关,同时需要将之前的连续L清0
                    dp[i][j][0] = (dp[i][j][0] + dp[i-1][j][k]) % 1000000007;
                }
            }
            //以A结尾
            for(int k = 0;k<=2;k++){
                //以A结尾那前一天不能有A，否则缺勤达到2天不满足条件
                dp[i][1][0] = (dp[i][1][0] + dp[i-1][0][k])%1000000007;
            }
            //以L结尾
            for(int j = 0;j<=1;j++){
                for(int k = 1;k<=2;k++){
                    //前i-1天的连续迟到不可大于等于2，否则会连续三天迟到不满足条件
                    dp[i][j][k] = (dp[i][j][k]+dp[i-1][j][k-1])%1000000007;
                }
            }
        }
        int res = 0;
        for(int j = 0;j<=1;j++){
            for(int k = 0;k<=2;k++)
                res = (res+dp[n][j][k])%1000000007;
        }
        return res;
    }
};