class Solution {
public:
    int numWays(int n, vector<vector<int>>& relation, int k) {
        //BFS
        vector<vector<int>> edges(n);//记录每一个点能够到达的位置
        for(auto& edge:relation){
            int from = edge[0],to = edge[1];
            edges[from].push_back(to);
        }
        int ways = 0;
        function<void(int, int)> dfs = [&](int index, int steps){
            if(steps==k){
                if(index == n-1)
                    ways++;
                return;
            }
            for(int to:edges[index]){
                dfs(to,steps+1);
            }
        };
        dfs(0,0);//参数分别是(当前到达的位置,走的步数)
        return ways;
    }
};

class Solution {
public:
    int numWays(int n, vector<vector<int>>& relation, int k) {
        //动态规划
        vector<vector<int>> dp(k+1,vector<int>(n,0));//dp[i][j]存放走i步到j位置的总方案数
        dp[0][0] = 1;//初始位置一定在0,方案数为1
        for(int i = 1;i<=k;i++){
            for(auto& edge:relation){
                int from = edge[0], to = edge[1];
                dp[i][to] += dp[i-1][from];
            }
        }
        return dp[k][n-1];
    }
};