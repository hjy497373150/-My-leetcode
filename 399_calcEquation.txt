class Solution {
public:
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        //广度优先搜索BFS
        int nvars = 0;//计不同字符的总数
        unordered_map<string, int> variables;//把每个字符映射成整数
        int n = equations.size();
        for(int i = 0;i<n;i++){
            if(variables.find(equations[i][0])==variables.end())
                variables[equations[i][0]] = nvars++;
            if(variables.find(equations[i][1])==variables.end())
                variables[equations[i][1]] = nvars++;
        }
        //存储每个点直接连接到的所有点以及对应的权值
        vector<vector<pair<int,double>>> edges(nvars);
        for(int i = 0;i<n;i++){
            int va = variables[equations[i][0]],vb = variables[equations[i][1]];
            edges[va].push_back(make_pair(vb,values[i]));
            edges[vb].push_back(make_pair(va,1.0 / values[i]));
        }
        
        vector<double> res;
        for(const auto&q:queries){
            double result = -1.0;
            //当图中有这两个点时才进行BFS
            if(variables.find(q[0])!=variables.end() && variables.find(q[1])!=variables.end()){
                int ia = variables[q[0]],ib = variables[q[1]];
                if(ia==ib)
                    result = 1.0;
                else{
                    queue<int> points;
                    points.push(ia);
                    vector<double> ratios(nvars,-1.0);
                    ratios[ia] = 1.0;
                    while(!points.empty()&&ratios[ib]<0){
                        int x = points.front();
                        points.pop();
                        for(const auto [y,val]:edges[x]){
                            if(ratios[y]<0){
                                ratios[y] = ratios[x]*val;
                                points.push(y);
                            }
                        }
                    }
                    result = ratios[ib];
                }
            }
            res.push_back(result);
        }
        return res;
    }
};