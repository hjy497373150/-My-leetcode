/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    int sum = 0;
public:
    TreeNode* convertBST(TreeNode* root) {
        //本质是将当前节点的值转化为自身加上其右子树上的值和
        //反向中序遍历
        if(root!=nullptr){
            convertBST(root->right);
            sum += root->val;
            root->val = sum;
            convertBST(root->left);
        }
        return root;
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* convertBST(TreeNode* root) {
        //反向中序遍历不断累加,迭代，栈
        if(root==nullptr)
            return nullptr;
        stack<TreeNode*> stk;
        TreeNode* cur = root;
        while(cur){
            stk.push(cur);
            cur = cur->right;
        }
        int sum = 0;
        while(!stk.empty()){
            TreeNode* node = stk.top();
            stk.pop();
            sum += node->val;
            node->val = sum;
            node = node->left;
            while(node){
                stk.push(node);
                node = node->right;
            }
        }
        return root;
    }
};