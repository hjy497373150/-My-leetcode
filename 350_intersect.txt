class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        //最传统的做法，依次遍历
        int size1 = nums1.size();
        int size2 = nums2.size();
        if(size1 > size2){
            return helper(size2,nums2,nums1);
        }
        return helper(size1,nums1,nums2);
    }
    vector<int> helper(int size,vector<int>& nums1, vector<int>& nums2){
        for(int i = size-1;i>=0;i--){
            int flag = false;
            for(int j = 0;j<nums2.size();j++){
                if(nums2[j]==nums1[i]){
                    flag = true;
                    nums2.erase(nums2.begin()+j);
                    break;
                }
            }
            if(flag==false)
                nums1.erase(nums1.begin()+i);
        }
        return nums1;
    }
};

class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        //基本做法，先排序再双指针遍历
        int size1 = nums1.size();
        int size2 = nums2.size();
        int p = 0,q = 0;
        vector<int> res;
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        while(p<size1 && q<size2){
            if(nums1[p] == nums2[q]){
                res.push_back(nums1[p]);
                p++;
                q++;
            }
            else if(nums1[p]<nums2[q])
                p++;
            else
                q++;
        }
        return res;
    }
};

class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        //哈希做法，统计两个数组中各元素出现的次数
        //首先遍历第一个数组，并在哈希表中记录第一个数组中的每个数字以及对应出现的次数，
        //然后遍历第二个数组，对于第二个数组中的每个数字，如果在哈希表中存在这个数字，则将该数字添加到答案，
        //并减少哈希表中该数字出现的次数
        if(nums1.size()>nums2.size())
            return intersect(nums2,nums1);
        vector<int> res;
        unordered_map<int,int> mp;
        for(auto temp:nums1)
            ++mp[temp];
        for(auto num:nums2){
            if(mp.count(num)){
                res.push_back(num);
                --mp[num];
                if(mp[num]==0){
                    mp.erase(num);
                }
            }
        }
        return res;
    }
};