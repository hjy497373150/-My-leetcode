class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        
        //动态规划求出最大整数子集的长度和最大整数
        vector<int> dp(n+1,1);//dp[i]表示以nums[i]为最大整数的整数子集的大小
        int maxsize = 1;
        int maxval = dp[0];
        for(int i = 1;i<n;i++){
            for(int j = 0;j<i;j++){
                if(nums[i]%nums[j]==0)
                    dp[i] = max(dp[i],dp[j]+1);
            }
            if(dp[i]>maxsize){
                maxsize = dp[i];
                maxval = nums[i];
            }
        }
        //倒推获得最大子集
        vector<int> res;
        if(maxsize==1){
            res.emplace_back(nums[0]);
            return res;
        }
        for (int i = n - 1; i >= 0 && maxsize > 0; i--){
            if (dp[i] == maxsize && maxval % nums[i] == 0) {
                res.push_back(nums[i]);
                maxval = nums[i];
                maxsize--;
            }
        }
        return res;
    }
};