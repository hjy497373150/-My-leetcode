class Solution {
public:
    int strStr(string haystack, string needle) {
        int m = haystack.length();
        int n = needle.length();
        if(n == 0)
            return 0;
        if(m == 0)
            return -1;
        int flag = 0;
        for(int i = 0;i < m-n+1;i++){
            int j = 0;
            if(haystack[i] == needle[j]){
                flag = i;
                for(;j<n;j++){
                    if(haystack[i] != needle[j]){
                        i = flag;
                        break;
                     }
                    i++;
                }
                if(j == n)
                    return flag; 
            }
        }
        return -1;
    }
};

class Solution {
public:
    int strStr(string ss, string pp) {
        //KMP解法
        if (pp.size()<=0) 
		    return 0;
        //int sum=0; 求子串出现次数 
        // 分别读取原串和匹配串的长度
        int n = ss.length(), m = pp.length();
        // 原串和匹配串前面都加空格，使其下标从 1 开始
        ss = " " + ss;
        pp = " " + pp;

        string s=ss;
        string p=pp;
        
        // 构建 next 数组，数组长度为匹配串的长度（next 数组是和匹配串相关的）
        int next[m + 1];
        memset(next,0,sizeof(next));
        // 构造过程 i = 2，j = 0 开始，i 小于等于匹配串长度 【构造 i 从 2 开始】
        for (int i = 2, j = 0; i <= m; i++) {
            // 匹配不成功的话，j = next(j)
            while (j > 0 && p[i] != p[j + 1]) 
                j = next[j];
            // 匹配成功的话，j++
            if (p[i] == p[j + 1]) 
                j++;
            next[i] = j;
        }

        // 匹配过程，i = 1，j = 0 开始，i 小于等于原串长度 【匹配 i 从 1 开始】
        for (int i = 1, j = 0; i <= n; i++) {
            // 匹配不成功 j = next(j)
            while (j > 0 && s[i] != p[j + 1]) 
                j = next[j];
            // 匹配成功 j++
            if (s[i] == p[j + 1]) j++;
            // 如果匹配成功了，直接返回
            if (j == m) {
                return i-m;
                //sum++;求子串出现次数就用这个
            }

        }
        //return sum;
        return -1;
    }
};