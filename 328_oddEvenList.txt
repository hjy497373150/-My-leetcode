/**
 * C++
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        //节点个数少于三个直接返回
        if(head == nullptr ||head->next == nullptr || head->next->next==nullptr)
            return head;
        //双指针法
        ListNode* oddtail = head;
        ListNode* evenhead = head->next;
        ListNode* eventail = head->next;
        //依次将奇节点相连
        while(eventail!=nullptr && eventail->next !=nullptr){
            oddtail->next = eventail->next;
            oddtail = oddtail->next;
            eventail->next = oddtail->next;
            eventail = eventail->next;
        }
        //最后把最后一个奇节点与第一个偶节点相连
        oddtail->next = evenhead;
        return head;
    }
};

/**
 * Java
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head==null||head.next==null||head.next==null)
            return head;
        ListNode odd = head;
        ListNode evenhead = head.next;
        ListNode eventail = head.next;
        while(eventail!=null && eventail.next!=null){
            odd.next = eventail.next;
            odd = odd.next;
            eventail.next = odd.next;
            eventail = odd.next;
        }
        odd.next = evenhead;
        return head;
    }
}